// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/selmison/code-micro-videos/pkg/crud (interfaces: Repository,Service)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/selmison/code-micro-videos/models"
	crud "github.com/selmison/code-micro-videos/pkg/crud"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddCastMember mocks base method
func (m *MockRepository) AddCastMember(arg0 crud.CastMemberDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCastMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCastMember indicates an expected call of AddCastMember
func (mr *MockRepositoryMockRecorder) AddCastMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCastMember", reflect.TypeOf((*MockRepository)(nil).AddCastMember), arg0)
}

// AddCategory mocks base method
func (m *MockRepository) AddCategory(arg0 crud.CategoryDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory
func (mr *MockRepositoryMockRecorder) AddCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockRepository)(nil).AddCategory), arg0)
}

// AddGenre mocks base method
func (m *MockRepository) AddGenre(arg0 crud.GenreDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGenre", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGenre indicates an expected call of AddGenre
func (mr *MockRepositoryMockRecorder) AddGenre(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenre", reflect.TypeOf((*MockRepository)(nil).AddGenre), arg0)
}

// FetchCastMember mocks base method
func (m *MockRepository) FetchCastMember(arg0 string) (models.CastMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCastMember", arg0)
	ret0, _ := ret[0].(models.CastMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCastMember indicates an expected call of FetchCastMember
func (mr *MockRepositoryMockRecorder) FetchCastMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCastMember", reflect.TypeOf((*MockRepository)(nil).FetchCastMember), arg0)
}

// FetchCategory mocks base method
func (m *MockRepository) FetchCategory(arg0 string) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCategory", arg0)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCategory indicates an expected call of FetchCategory
func (mr *MockRepositoryMockRecorder) FetchCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCategory", reflect.TypeOf((*MockRepository)(nil).FetchCategory), arg0)
}

// FetchGenre mocks base method
func (m *MockRepository) FetchGenre(arg0 string) (models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGenre", arg0)
	ret0, _ := ret[0].(models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGenre indicates an expected call of FetchGenre
func (mr *MockRepositoryMockRecorder) FetchGenre(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGenre", reflect.TypeOf((*MockRepository)(nil).FetchGenre), arg0)
}

// GetCastMembers mocks base method
func (m *MockRepository) GetCastMembers(arg0 int) (models.CastMemberSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCastMembers", arg0)
	ret0, _ := ret[0].(models.CastMemberSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCastMembers indicates an expected call of GetCastMembers
func (mr *MockRepositoryMockRecorder) GetCastMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCastMembers", reflect.TypeOf((*MockRepository)(nil).GetCastMembers), arg0)
}

// GetCategories mocks base method
func (m *MockRepository) GetCategories(arg0 int) (models.CategorySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", arg0)
	ret0, _ := ret[0].(models.CategorySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockRepositoryMockRecorder) GetCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockRepository)(nil).GetCategories), arg0)
}

// GetGenres mocks base method
func (m *MockRepository) GetGenres(arg0 int) (models.GenreSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres", arg0)
	ret0, _ := ret[0].(models.GenreSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenres indicates an expected call of GetGenres
func (mr *MockRepositoryMockRecorder) GetGenres(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockRepository)(nil).GetGenres), arg0)
}

// RemoveCastMember mocks base method
func (m *MockRepository) RemoveCastMember(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCastMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCastMember indicates an expected call of RemoveCastMember
func (mr *MockRepositoryMockRecorder) RemoveCastMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCastMember", reflect.TypeOf((*MockRepository)(nil).RemoveCastMember), arg0)
}

// RemoveCategory mocks base method
func (m *MockRepository) RemoveCategory(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCategory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCategory indicates an expected call of RemoveCategory
func (mr *MockRepositoryMockRecorder) RemoveCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCategory", reflect.TypeOf((*MockRepository)(nil).RemoveCategory), arg0)
}

// RemoveGenre mocks base method
func (m *MockRepository) RemoveGenre(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGenre", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGenre indicates an expected call of RemoveGenre
func (mr *MockRepositoryMockRecorder) RemoveGenre(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGenre", reflect.TypeOf((*MockRepository)(nil).RemoveGenre), arg0)
}

// UpdateCastMember mocks base method
func (m *MockRepository) UpdateCastMember(arg0 string, arg1 crud.CastMemberDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCastMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCastMember indicates an expected call of UpdateCastMember
func (mr *MockRepositoryMockRecorder) UpdateCastMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCastMember", reflect.TypeOf((*MockRepository)(nil).UpdateCastMember), arg0, arg1)
}

// UpdateCategory mocks base method
func (m *MockRepository) UpdateCategory(arg0 string, arg1 crud.CategoryDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockRepositoryMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockRepository)(nil).UpdateCategory), arg0, arg1)
}

// UpdateGenre mocks base method
func (m *MockRepository) UpdateGenre(arg0 string, arg1 crud.GenreDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenre indicates an expected call of UpdateGenre
func (mr *MockRepositoryMockRecorder) UpdateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockRepository)(nil).UpdateGenre), arg0, arg1)
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddCastMember mocks base method
func (m *MockService) AddCastMember(arg0 crud.CastMemberDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCastMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCastMember indicates an expected call of AddCastMember
func (mr *MockServiceMockRecorder) AddCastMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCastMember", reflect.TypeOf((*MockService)(nil).AddCastMember), arg0)
}

// AddCategory mocks base method
func (m *MockService) AddCategory(arg0 crud.CategoryDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory
func (mr *MockServiceMockRecorder) AddCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockService)(nil).AddCategory), arg0)
}

// AddGenre mocks base method
func (m *MockService) AddGenre(arg0 crud.GenreDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGenre", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGenre indicates an expected call of AddGenre
func (mr *MockServiceMockRecorder) AddGenre(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGenre", reflect.TypeOf((*MockService)(nil).AddGenre), arg0)
}

// FetchCastMember mocks base method
func (m *MockService) FetchCastMember(arg0 string) (models.CastMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCastMember", arg0)
	ret0, _ := ret[0].(models.CastMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCastMember indicates an expected call of FetchCastMember
func (mr *MockServiceMockRecorder) FetchCastMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCastMember", reflect.TypeOf((*MockService)(nil).FetchCastMember), arg0)
}

// FetchCategory mocks base method
func (m *MockService) FetchCategory(arg0 string) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCategory", arg0)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCategory indicates an expected call of FetchCategory
func (mr *MockServiceMockRecorder) FetchCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCategory", reflect.TypeOf((*MockService)(nil).FetchCategory), arg0)
}

// FetchGenre mocks base method
func (m *MockService) FetchGenre(arg0 string) (models.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchGenre", arg0)
	ret0, _ := ret[0].(models.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchGenre indicates an expected call of FetchGenre
func (mr *MockServiceMockRecorder) FetchGenre(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchGenre", reflect.TypeOf((*MockService)(nil).FetchGenre), arg0)
}

// GetCastMembers mocks base method
func (m *MockService) GetCastMembers(arg0 int) (models.CastMemberSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCastMembers", arg0)
	ret0, _ := ret[0].(models.CastMemberSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCastMembers indicates an expected call of GetCastMembers
func (mr *MockServiceMockRecorder) GetCastMembers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCastMembers", reflect.TypeOf((*MockService)(nil).GetCastMembers), arg0)
}

// GetCategories mocks base method
func (m *MockService) GetCategories(arg0 int) (models.CategorySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", arg0)
	ret0, _ := ret[0].(models.CategorySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockServiceMockRecorder) GetCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockService)(nil).GetCategories), arg0)
}

// GetGenres mocks base method
func (m *MockService) GetGenres(arg0 int) (models.GenreSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres", arg0)
	ret0, _ := ret[0].(models.GenreSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenres indicates an expected call of GetGenres
func (mr *MockServiceMockRecorder) GetGenres(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockService)(nil).GetGenres), arg0)
}

// RemoveCastMember mocks base method
func (m *MockService) RemoveCastMember(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCastMember", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCastMember indicates an expected call of RemoveCastMember
func (mr *MockServiceMockRecorder) RemoveCastMember(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCastMember", reflect.TypeOf((*MockService)(nil).RemoveCastMember), arg0)
}

// RemoveCategory mocks base method
func (m *MockService) RemoveCategory(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCategory", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCategory indicates an expected call of RemoveCategory
func (mr *MockServiceMockRecorder) RemoveCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCategory", reflect.TypeOf((*MockService)(nil).RemoveCategory), arg0)
}

// RemoveGenre mocks base method
func (m *MockService) RemoveGenre(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGenre", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGenre indicates an expected call of RemoveGenre
func (mr *MockServiceMockRecorder) RemoveGenre(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGenre", reflect.TypeOf((*MockService)(nil).RemoveGenre), arg0)
}

// UpdateCastMember mocks base method
func (m *MockService) UpdateCastMember(arg0 string, arg1 crud.CastMemberDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCastMember", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCastMember indicates an expected call of UpdateCastMember
func (mr *MockServiceMockRecorder) UpdateCastMember(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCastMember", reflect.TypeOf((*MockService)(nil).UpdateCastMember), arg0, arg1)
}

// UpdateCategory mocks base method
func (m *MockService) UpdateCategory(arg0 string, arg1 crud.CategoryDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockServiceMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockService)(nil).UpdateCategory), arg0, arg1)
}

// UpdateGenre mocks base method
func (m *MockService) UpdateGenre(arg0 string, arg1 crud.GenreDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGenre indicates an expected call of UpdateGenre
func (mr *MockServiceMockRecorder) UpdateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockService)(nil).UpdateGenre), arg0, arg1)
}
