// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/listing/service.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/selmison/code-micro-videos/models"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetCategories mocks base method
func (m *MockRepository) GetCategories(limit int) (models.CategorySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", limit)
	ret0, _ := ret[0].(models.CategorySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockRepositoryMockRecorder) GetCategories(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockRepository)(nil).GetCategories), limit)
}

// FetchCategory mocks base method
func (m *MockRepository) FetchCategory(name string) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCategory", name)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCategory indicates an expected call of FetchCategory
func (mr *MockRepositoryMockRecorder) FetchCategory(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCategory", reflect.TypeOf((*MockRepository)(nil).FetchCategory), name)
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetCategories mocks base method
func (m *MockService) GetCategories(limit int) (models.CategorySlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", limit)
	ret0, _ := ret[0].(models.CategorySlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories
func (mr *MockServiceMockRecorder) GetCategories(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockService)(nil).GetCategories), limit)
}

// FetchCategory mocks base method
func (m *MockService) FetchCategory(name string) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCategory", name)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCategory indicates an expected call of FetchCategory
func (mr *MockServiceMockRecorder) FetchCategory(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCategory", reflect.TypeOf((*MockService)(nil).FetchCategory), name)
}
