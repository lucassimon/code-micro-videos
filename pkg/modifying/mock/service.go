// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/modifying/service.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	modifying "github.com/selmison/code-micro-videos/pkg/modifying"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddCategory mocks base method
func (m *MockRepository) AddCategory(c modifying.CategoryDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory
func (mr *MockRepositoryMockRecorder) AddCategory(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockRepository)(nil).AddCategory), c)
}

// RemoveCategory mocks base method
func (m *MockRepository) RemoveCategory(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCategory", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCategory indicates an expected call of RemoveCategory
func (mr *MockRepositoryMockRecorder) RemoveCategory(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCategory", reflect.TypeOf((*MockRepository)(nil).RemoveCategory), name)
}

// UpdateCategory mocks base method
func (m *MockRepository) UpdateCategory(name string, c modifying.CategoryDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", name, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockRepositoryMockRecorder) UpdateCategory(name, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockRepository)(nil).UpdateCategory), name, c)
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddCategory mocks base method
func (m *MockService) AddCategory(c modifying.CategoryDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategory", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategory indicates an expected call of AddCategory
func (mr *MockServiceMockRecorder) AddCategory(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategory", reflect.TypeOf((*MockService)(nil).AddCategory), c)
}

// RemoveCategory mocks base method
func (m *MockService) RemoveCategory(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCategory", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCategory indicates an expected call of RemoveCategory
func (mr *MockServiceMockRecorder) RemoveCategory(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCategory", reflect.TypeOf((*MockService)(nil).RemoveCategory), name)
}

// UpdateCategory mocks base method
func (m *MockService) UpdateCategory(name string, c modifying.CategoryDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", name, c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory
func (mr *MockServiceMockRecorder) UpdateCategory(name, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockService)(nil).UpdateCategory), name, c)
}
